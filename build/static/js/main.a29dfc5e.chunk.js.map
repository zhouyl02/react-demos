{"version":3,"sources":["components/button.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","active","deltaX","deltaY","myRef","React","createRef","react_default","a","createElement","ref","className","onClick","x","bind","value","onAnimationEnd","y","style","left","top","zzz","_this$myRef$current$g","current","getBoundingClientRect","clientX","clientY","setState","console","log","Component","App","button_Button","z","klsjadlksajdlksajdlksjlsjl","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAGqBA,2BACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,QAAQ,EACRC,OAAQ,EACRC,OAAQ,GAEVV,EAAKW,MAAQC,IAAMC,YAPFb,wEAUjB,OAEEc,EAAAC,EAAAC,cAAA,UAAQC,IAAKd,KAAKQ,MAAOO,UAAU,UAAUC,QAAShB,KAAKiB,EAAEC,KAAKlB,OAChEW,EAAAC,EAAAC,cAAA,QAAME,UAAU,SAASf,KAAKJ,MAAMuB,QACb,IAAtBnB,KAAKI,MAAMC,OACVM,EAAAC,EAAAC,cAAA,QACEE,UAAU,SACVK,eAAgBpB,KAAKqB,EAAEH,KAAKlB,MAC5BsB,MAAO,CAAEC,KAAMvB,KAAKI,MAAME,OAAQkB,IAAKxB,KAAKI,MAAMG,UAGpD,8BAMNkB,GAAK,IAAAC,EACU1B,KAAKQ,MAAMmB,QAAQC,wBAA5BX,EADDS,EACCT,EAAGI,EADJK,EACIL,EAELf,EADuBmB,EAArBI,QACiBZ,EAAI,EACvBV,EAFuBkB,EAAZK,QAEQT,EAAI,EAC3BrB,KAAK+B,SAAS,CACZ1B,QAAQ,EACRC,OAAQA,EACRC,OAAQA,IAEVyB,QAAQC,IAAI,kCACZjC,KAAKJ,MAAMoB,SAAWhB,KAAKJ,MAAMoB,QAAQb,KAAK,KAAM,oCAGpDH,KAAK+B,SAAS,CACZ1B,QAAQ,WA3CsB6B,cCiBrBC,mLAdX,OACExB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACuB,EAAD,CAAQjB,MAAM,eAAKH,QAAShB,KAAKqC,EAAEnB,KAAKlB,QACxCW,EAAAC,EAAAC,cAACuB,EAAD,CAAQjB,MAAM,iBACdR,EAAAC,EAAAC,cAACuB,EAAD,CAAQjB,MAAM,4CAIlBmB,GACAN,QAAQC,IAAI,kCACZD,QAAQC,IAAIK,UAZEJ,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a29dfc5e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './button.css';\n\nexport default class Button extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: false,\n      deltaX: 0,\n      deltaY: 0,\n    };\n    this.myRef = React.createRef();\n  }\n  render() {\n    return (\n        // 调用onclick浏览器会给你一个event对象\n      <button ref={this.myRef} className=\"button2\" onClick={this.x.bind(this)}> \n        <span className=\"value\">{this.props.value}</span>\n        {this.state.active === true ? (\n          <span\n            className=\"circle\"\n            onAnimationEnd={this.y.bind(this)}\n            style={{ left: this.state.deltaX, top: this.state.deltaY }}\n          />\n        ) : (\n          ''\n        )}\n      </button>\n    );\n  }\n//   zzz只是拿到浏览器给的event对象的一个东西\n  x(zzz) {\n    let { x, y } = this.myRef.current.getBoundingClientRect();\n    let { clientX, clientY } = zzz;\n    let deltaX = clientX - x - 5;\n    let deltaY = clientY - y - 5;\n    this.setState({\n      active: true,\n      deltaX: deltaX,\n      deltaY: deltaY,\n    });\n    console.log('里面的函数');    \n    this.props.onClick && this.props.onClick.call(null, 'fuck');\n  }\n  y() {\n    this.setState({\n      active: false,\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Button from './components/button';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Button value=\"按钮\" onClick={this.z.bind(this)} />\n        <Button value=\"按钮\" />\n        <Button value=\"按钮\" />\n      </div>\n    );\n  }\n  z(klsjadlksajdlksajdlksjlsjl) {\n    console.log('外面的函数')\n    console.log(klsjadlksajdlksajdlksjlsjl);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}